{"version":3,"sources":["webpack://@pascalcoin-sbx/walletkeys.dat/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/walletkeys.dat/webpack/bootstrap","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/BC.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Endian.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/AbstractType.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/Int32.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/CompositeType.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/AbstractInt.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/Int16.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/Int8.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Currency.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/AccountNumber.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Keys/Curve.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/BytesWithLength.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/BytesWithoutLength.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/Keys/Curve.js","webpack://@pascalcoin-sbx/walletkeys.dat/./src/File.js","webpack://@pascalcoin-sbx/walletkeys.dat/./src/Key.js","webpack://@pascalcoin-sbx/walletkeys.dat/./src/KeyCoder.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Base58.js","webpack://@pascalcoin-sbx/walletkeys.dat/external \"buffer\"","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/PascalCoinInfo.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bn.js/lib/bn.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Sha.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Util.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/AccountName.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/OperationHash.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Keys/PublicKey.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/Int64.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/StringWithLength.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/StringWithoutLength.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/BytesFixedLength.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/AccountNumber.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/NOperation.js","webpack://@pascalcoin-sbx/walletkeys.dat/./index.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Keys/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Keys/KeyPair.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Repeating.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Decissive.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/Keys/PublicKey.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/AccountName.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/Currency.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/OpType.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/OperationHash.js","webpack://@pascalcoin-sbx/walletkeys.dat/./src/FileCoder.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Endian","require","P_BUFFER","BC","constructor","buffer","Buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","e","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","readInt8","offset","unsigned","readInt16","endian","detect","method","readInt32","buf","allocUnsafe","split","size","pos","splitted","push","detected","BIG_ENDIAN","LITTLE_ENDIAN","b","ArrayBuffer","a","Uint32Array","P_ID","P_FIXED_VALUE","P_HAS_FIXED_VALUE","P_DESCRIPTION","P_TARGET_FIELD_NAME","P_HAS_TARGET_FIELD_NAME","id","hasFixedValue","fixedValue","hasTargetFieldName","targetFieldName","encodedSize","decodeFromBytes","options","all","encodeToBytes","withFixedValue","withTargetFieldName","description","undefined","canDecode","AbstractInt","super","fromInt32","AbstractType","P_SUBTYPES","P_SIZE_ENCODED","P_FLATTEN","flatten","subTypes","addSubType","field","toArray","obj","forEach","subType","fieldName","decoded","assign","values","objOrArray","empty","idx","subTypeValue","Array","isArray","P_ENDIAN","P_UNSIGNED","fromInt16","fromInt8","Base58","PascalCoinInfo","Sha","Util","Types","Coding","BN","P_VALUE","toFixed","x","base","pow","dm","divmod","mod","div","isNegative","substr","Currency","pasc","isBN","join","negative","substring","comps","whole","fraction","molina","mul","add","neg","isVague","toStringOpt","decimals","replace","RegExp","toMolina","addValue","val","fromMolina","sub","subValue","toPositive","isNeg","eq","gt","lt","lteq","lte","gteq","gte","bn","serialize","pascal","P_ACCOUNT","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","AccountNumber","account","map","isNaN","calculateChecksum","Math","floor","isDeveloperReward","checksum","createdInBlock","isFoundationReward","accountNumber","CURVES","0","714","715","729","716","XYL_PUBKEYS","y","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","curve","indexOf","keys","xylPublicKey","xOrY","lPrivateKey","supported","Int8","Int16","Int32","BytesWithoutLength","P_LENGTH_FIELD","P_BYTES_FIELD","P_HAS_LEADING_ZB","byteSize","lengthId","lengthDesc","hasLeadingZeroByte","lengthField","encoded","CurveType","P_MAGIC","P_VERSION","P_KEYS","magic","version","countKeys","addKey","P_NAME","P_PUBKEY","P_ENC_PRIVATE_KEY","publicKey","encryptedPrivateKey","Key","CompositeType","Core","StringWithLength","Pascal","Keys","PublicKey","BytesWithLength","bs58","encode","decode","block","PIP_0010","INFLATION_REDUCTION","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","MAX_PAYLOAD_LENGTH","assert","msg","inherits","ctor","superCtor","super_","TempCtor","number","words","red","_init","wordSize","parseHex","len","min","charCodeAt","parseBase","num","max","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","ceil","j","w","off","limbLen","limbPow","total","word","imuln","_iaddn","copy","dest","clone","_expand","_normSign","inspect","zeros","groupSizes","groupBases","smallMulTo","out","lo","carry","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","ret","toJSON","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","littleEndian","res","q","andln","iushrn","clz32","_countBits","_zeroBits","bitLength","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","bhi","diff","qj","positive","divn","umod","divRound","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","output","outLen","next","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","sha256","sha512","buffers","hasher","SHA256","update","digest","SHA512","Convert","str2bin","bin","subarray","hex2bin","int2bin","integer","number2bin","f","Float64Array","set","base642bin","base64","strlen","charAt","atob","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c2","c3","String","fromCharCode","bin2longbin","longbin","bin2number","bin2base64","url","btoa","apply","encodingTable","octet_a","octet_b","octet_c","lh","rh","clear","fill","ind","litteendian","string","CHARS_TO_ESCAPE","REGEX_TO_ESCAPE","escapeRegex","ALLOWED_ALL","ALLOWED_START","AccountName","validate","toStringEscaped","c1","P_BLOCK","P_N_OPERATION","P_MD160","nOperation","md160","opHash","ignoreBlock","blockResult","P_KEY","P_CURVE","privateKeyLength","ec","P_X","P_XL","P_Y","P_YL","yl","xl","ecdh","validate64Bit","isUnsigned","StringWithoutLength","P_STRING_FIELD","P_SIZE","AccountNumberType","File","KeyCoder","FileCoder","basex","ALPHABET","TypeError","BASE_MAP","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","b256","it","vch","isBuffer","pbegin","pend","b58","copyProps","src","dst","SafeBuffer","arg","encodingOrOffset","allocUnsafeSlow","encoding","SlowBuffer","webpackPolyfill","deprecate","paths","children","base_1","hashSize","K","init","H","bufferIndex","count","h0","h1","h2","h3","h4","h5","h6","h7","hash","selftest","cumulative","sha","toBeHashed","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","OperationHash","PrivateKey","KeyPair","P_PRIVATE_KEY","P_PUBLIC_KEY","privateKey","Repeating","Decissive","Int64","BytesFixedLength","NOperation","OpType","P_REPEAT_LIMIT","P_REPEAT_MARKER","P_TYPE","type","repeatLimit","repeatMarker","result","limit","counter","arr","item","repeatingType","P_SUBTYPE_RESOLVER","P_MARKER_FIELD","markerField","subTypeResolver","PublicKeyType","omitXYLenghts","encodeToBase58","prefix","suffix","raw","decodeFromBase58","base58","PrivateKeyType","AccountNameType","CurrencyType","P_INT_TYPE","intType","BytesWithFixedLength","OperationHashType","decissiveCoder","versionValue","V100Coder","keyFile","versioned"],"mappings":"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","file":"@pascalcoin-sbx/walletkeys.dat.node.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/walletkeys.dat\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/walletkeys.dat\"] = factory();\n\telse\n\t\troot[\"@pascalcoin-sbx/walletkeys.dat\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 35);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./Endian');\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      try {\n        return BC.fromHex(data);\n      } catch (e) {\n        return BC.fromString(data);\n      }\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n   * Gets an empty BC.\n   *\n   * @returns {BC}\n   */\n  static empty() {\n    return BC.from([]);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str, 'utf8'));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString('utf8');\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end = null) {\n    if (end === null) {\n      return new BC(this[P_BUFFER].slice(start));\n    }\n\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n\n  /**\n   * Reads an 8 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @returns {Number}\n   */\n  readInt8(offset, unsigned = true) {\n    return this[P_BUFFER][unsigned ? 'readUInt8' : 'readInt8'](offset);\n  }\n\n  /**\n   * Reads a 16 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt16(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int16${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 32 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt32(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int32${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Creates an 8 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @returns {BC}\n   */\n  static fromInt8(value, unsigned = true) {\n    const method = `write${unsigned ? 'U' : ''}Int8`;\n    const buf = Buffer.allocUnsafe(1);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 16 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt16(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int16${endian}`;\n    const buf = Buffer.allocUnsafe(2);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 32 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt32(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int32${endian}`;\n    const buf = Buffer.allocUnsafe(4);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Small helper to split a byte collection.\n   *\n   * @param {Number} size\n   * @return {BC[]}\n   */\n  split(size) {\n    let pos = 0;\n\n    let splitted = [];\n\n    for (; pos < this.length; pos += size) {\n      splitted.push(this.slice(pos, pos + size));\n    }\n\n    return splitted;\n  }\n\n}\n\nmodule.exports = BC;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet detected = null;\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    if (detected === null) {\n      const b = new ArrayBuffer(4);\n      const a = new Uint32Array(b);\n      const c = new Uint8Array(b);\n\n      a[0] = 0xdeadbeef;\n      if (c[0] === 0xef) {\n        detected = Endian.LITTLE_ENDIAN;\n      }\n      if (c[0] === 0xde) {\n        detected = Endian.BIG_ENDIAN;\n      }\n    }\n\n    return detected;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_ID = Symbol('id');\nconst P_FIXED_VALUE = Symbol('fixed_value');\nconst P_HAS_FIXED_VALUE = Symbol('has_fixed_value');\nconst P_DESCRIPTION = Symbol('description');\nconst P_TARGET_FIELD_NAME = Symbol('target_field_name');\nconst P_HAS_TARGET_FIELD_NAME = Symbol('has_target_field_name');\n\n/**\n * Abstract field type to encode and decode values. Abstracts encodeToBytes and decodeFromBytes as\n * basic implementations but in fact it can be anything.\n */\nclass AbstractType {\n  /**\n   * Constructor.\n   *\n   * @param {string|null} id\n   */\n  constructor(id = null) {\n    this[P_ID] = id;\n    this[P_HAS_FIXED_VALUE] = false;\n    this[P_HAS_TARGET_FIELD_NAME] = false;\n  }\n\n  /**\n   * Gets the field ident.\n   *\n   * @returns {String}\n   */\n  get id() {\n    return this[P_ID];\n  }\n\n  /**\n   * Gets a value indicating whether the field type has a fixed value.\n   *\n   * @returns {Boolean}\n   */\n  get hasFixedValue() {\n    return this[P_HAS_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the fixed value.\n   *\n   * @returns {*}\n   */\n  get fixedValue() {\n    return this[P_FIXED_VALUE];\n  }\n\n  /**\n   * Gets a value indicating whether the field has a different target field name.\n   *\n   * @returns {Boolean}\n   */\n  get hasTargetFieldName() {\n    return this[P_HAS_TARGET_FIELD_NAME];\n  }\n\n  /**\n   * Gets the target field name.\n   *\n   * @returns {string}\n   */\n  get targetFieldName() {\n    return this[P_TARGET_FIELD_NAME];\n  }\n\n  /**\n   * Gets the encoded size of the type.\n   *\n   * @return {Number}\n   */\n  get encodedSize() {\n    throw new Error('Encoded size getter not implemented');\n  }\n\n  /**\n   * Decodes a value using the rules defined in the method from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    throw new Error('Missing implementation for decodeFromBytes.');\n  }\n\n  /**\n   * Returns the encoded bytes for the given value.\n   *\n   * @param {*} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    throw new Error('Missing implementation for encodeToBytes.');\n  }\n\n  /**\n   * Sets a fixed value.\n   *\n   * @param {*} value\n   * @returns {AbstractType}\n   */\n  withFixedValue(value) {\n    this[P_FIXED_VALUE] = value;\n    this[P_HAS_FIXED_VALUE] = true;\n    return this;\n  }\n\n  /**\n   * Sets a fixed value.\n   *\n   * @param {string} targetFieldName\n   * @returns {AbstractType}\n   */\n  withTargetFieldName(targetFieldName) {\n    this[P_TARGET_FIELD_NAME] = targetFieldName;\n    this[P_HAS_TARGET_FIELD_NAME] = true;\n    return this;\n  }\n\n  /**\n   * Sets the description and returns the type or gets the description itself.\n   *\n   * @param {String} description\n   * @returns {AbstractType|String}\n   */\n  description(description = null) {\n    if (description === null) {\n      return this[P_DESCRIPTION];\n    }\n\n    if (this[P_DESCRIPTION] === undefined) {\n      this[P_DESCRIPTION] = [];\n    }\n    this[P_DESCRIPTION].push(description);\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the type can be decoded. It is\n   * not possible in some circumstances.\n   *\n   * @return {boolean}\n   */\n  get canDecode() {\n    return true;\n  }\n}\n\nmodule.exports = AbstractType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 32bit int values.\n */\nclass Int32 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int32', unsigned, endian);\n    this.description('4byte 32bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 4;\n  }\n\n  /**\n   * Reads the given int32 value.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt32(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int32 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt32(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int32;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SUBTYPES = Symbol('subtypes');\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_FLATTEN = Symbol('flatten');\n\n/**\n * A Type that itself is made up of multiple other (sub-)types.\n */\nclass CompositeType extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id, flatten = false) {\n    super(id || 'composite_type');\n    super.description('A type that itself is made up of multiple other types.');\n    this[P_SUBTYPES] = [];\n    this[P_FLATTEN] = flatten;\n  }\n\n  /**\n   * Gets all subtypes.\n   *\n   * @returns {Array}\n   */\n  get subTypes() {\n    return this[P_SUBTYPES];\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Adds a new field (type) definition.\n   *\n   * @param {AbstractType} field\n   */\n  addSubType(field) {\n    this[P_SUBTYPES].push(field);\n    return this;\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = { toArray: false }, all = null) {\n    if (this.canDecode === false) {\n      throw new Error('This type cannot be decoded.');\n    }\n    let obj = {};\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    this.subTypes.forEach((subType) => {\n      const fieldName = subType.hasTargetFieldName ? subType.targetFieldName : subType.id;\n      const decoded = subType.decodeFromBytes(bc.slice(offset), options, obj);\n\n      if (subType.constructor.name === 'Decissive' && subType.flatten) {\n        obj = Object.assign(obj, decoded);\n      } else {\n        obj[fieldName] = decoded;\n      }\n      offset += subType.encodedSize;\n    });\n    this[P_SIZE_ENCODED] = offset;\n\n    return options.toArray ? Object.values(obj) : obj;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array|*} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray) {\n    let bc = BC.empty();\n\n    this.subTypes.forEach((subType, idx) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        if (subType.constructor.name === 'Decissive' && subType.flatten) {\n          subTypeValue = objOrArray;\n        } else {\n          subTypeValue = Array.isArray(objOrArray) ? objOrArray[idx] : objOrArray[subType.id];\n        }\n\n      }\n\n      // we will use the first available\n      bc = bc.append(subType.encodeToBytes(subTypeValue, objOrArray));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * Gets a value indicating whether the value should be flattened.\n   *\n   * @return {bool}\n   */\n  get flatten() {\n    return this[P_FLATTEN];\n  }\n}\n\nmodule.exports = CompositeType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst P_ENDIAN = Symbol('endian');\nconst P_UNSIGNED = Symbol('unsigned');\n\n/**\n * Abstract integer field type.\n */\nclass AbstractInt extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id);\n    this[P_UNSIGNED] = unsigned;\n    this[P_ENDIAN] = endian;\n  }\n\n  /**\n   * Gets the endianness.\n   *\n   * @returns {String}\n   */\n  get endian() {\n    return this[P_ENDIAN];\n  }\n\n  /**\n   * Gets a value indicating whether the value is an unsigned integer.\n   *\n   * @returns {Boolean}\n   */\n  get unsigned() {\n    return this[P_UNSIGNED];\n  }\n}\n\nmodule.exports = AbstractInt;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for a 16bit int value.\n */\nclass Int16 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int16', unsigned, endian);\n    this.description('2byte 16bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 2;\n  }\n\n  /**\n   * Decodes the int16 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt16(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Encodes the given Int16 value to a byte sequence.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt16(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int16;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\n/**\n * Fields type for an 8Bit int value.\n */\nclass Int8 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   */\n  constructor(id, unsigned) {\n    super(id || 'int8', unsigned, Endian.LITTLE_ENDIAN);\n    this.description('1byte 8bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 1;\n  }\n\n  /**\n   * Reads the int8 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt8(0, this.unsigned);\n  }\n\n  /**\n   * Encodes the given int8 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt8(value, this.unsigned);\n  }\n}\n\nmodule.exports = Int8;\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  PascalCoinInfo: require('./src/PascalCoinInfo'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types'),\n  Coding: require('./src/Coding')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BN = require('bn.js');\n\nconst P_VALUE = Symbol('value');\n\nfunction toFixed(x) {\n  let base = new BN(10).pow(new BN(4));\n  let dm = x.divmod(base);\n\n  let mod = dm.mod.toString(10, 4);\n  let m = dm.div.toString();\n\n  let isNegative = false;\n\n  if (x.toString().substr(0, 1) === '-') {\n    if (m.substr(0, 1) === '-') {\n      m = m.substr(1);\n    }\n    if (mod.substr(0, 1) === '-') {\n      mod = mod.substr(1);\n    }\n    isNegative = true;\n  }\n\n  return `${isNegative ? '-' : ''}${m}.${mod}`;\n}\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (BN.isBN(pasc)) {\n      this[P_VALUE] = pasc;\n      return;\n    }\n\n    pasc = pasc.toString();\n    pasc = pasc.split(',').join(''); // remove commas\n    // now split the '.'\n\n    const ten = new BN(10);\n    const base = ten.pow(new BN(4));\n\n    // Is it negative?\n    let negative = (pasc.substring(0, 1) === '-');\n\n    if (negative) {\n      pasc = pasc.substring(1);\n    }\n\n    if (pasc === '.') {\n      throw new Error(\n        `Invalid value ${pasc} cannot be converted to` +\n          ' base unit with 4 decimals.');\n    }\n\n    // Split it into a whole and fractional part\n    let comps = pasc.split('.');\n\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\n\n    let whole = comps[0], fraction = comps[1];\n\n    if (!whole) { whole = '0'; }\n    if (!fraction) { fraction = '0'; }\n    if (fraction.length > 4) {\n      throw new Error('Too many decimal places');\n    }\n\n    while (fraction.length < 4) {\n      fraction += '0';\n    }\n\n    whole = new BN(whole);\n    fraction = new BN(fraction);\n    let molina = (whole.mul(base)).add(fraction);\n\n    if (negative) {\n      molina = molina.neg();\n    }\n\n    this[P_VALUE] = new BN(molina.toString(10), 10);\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BN(molina.toString())\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return toFixed(this[P_VALUE]);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return toFixed(this[P_VALUE])\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return this[P_VALUE].toString();\n  }\n\n  /**\n   * Adds the given value to the current value and returns a **new**\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} addValue\n   * @returns {Currency}\n   */\n  add(addValue) {\n    return new Currency(\n      this.value.add(new Currency(addValue).value),\n    );\n  }\n\n  /**\n   * Adds the given value to the current value and returns a **new**\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} addValue\n   * @returns {Currency}\n   */\n  mul(val) {\n    return Currency.fromMolina(\n      this.value.mul(new BN(val))\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.sub(new Currency(subValue).value)\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (this[P_VALUE].isNeg() === true) {\n      return new Currency(\n        this[P_VALUE].neg(),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].eq(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].gt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].lt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].lte(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].gte(new Currency(value).value);\n  }\n\n  get bn() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PascalCoinInfo = require('../PascalCoinInfo');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = PascalCoinInfo.isDeveloperReward(this[P_CREATED_IN_BLOCK]) &&\n        this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\nconst BytesWithoutLength = require('./BytesWithoutLength');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_BYTES_FIELD = Symbol('bytes_field');\nconst P_HAS_LEADING_ZB = Symbol('has_leading_zerobyte');\n\n/**\n * A field type to write dynamic content in form of bytes (prepends the length).\n */\nclass BytesWithLength extends AbstractType {\n  /**\n   * Constructor\n   *\n   * @param {string} id\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize = 1, lengthId = 'length', lengthDesc = null,\n    endian = Endian.LITTLE_ENDIAN, hasLeadingZeroByte = false) {\n    super(id || `bytes_with_length_${byteSize * 8}`);\n    this.description('Bytes with variable size prepended');\n    this[P_BYTES_FIELD] = new BytesWithoutLength('value');\n    this[P_HAS_LEADING_ZB] = hasLeadingZeroByte;\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8(lengthId, true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16(lengthId, true, endian);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32(lengthId, true, endian);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n\n    if (lengthDesc !== null) {\n      this[P_LENGTH_FIELD].description(lengthDesc);\n    }\n\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].encodedSize +\n      this[P_LENGTH_FIELD].decodeFromBytes(BC.from(bc)) +\n      (+this[P_HAS_LEADING_ZB]);\n    return this[P_BYTES_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize + (+this[P_HAS_LEADING_ZB]),\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    this[P_SIZE_ENCODED] = value.length + this[P_LENGTH_FIELD].encodedSize;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(\n      this[P_SIZE_ENCODED] - this[P_LENGTH_FIELD].encodedSize\n    );\n\n    return bc.append(this[P_BYTES_FIELD].encodeToBytes(value));\n  }\n\n  get lengthField() {\n    return this[P_LENGTH_FIELD];\n  }\n}\n\nmodule.exports = BytesWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write bytes without prepending the length. This cannot be decoded in some circumstances.\n */\nclass BytesWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'bytes_without_length');\n    this.description('Bytes without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * In fact this does nothing other than updating the internal size.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value);\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n}\n\nmodule.exports = BytesWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CurveType = require('./../../../Types/Keys/Curve');\nconst Endian = require('./../../../Endian');\nconst Int16 = require('./../../Core/Int16');\n\n/**\n * A special pascal type that can en/decode a curve id.\n */\nclass Curve extends Int16 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'curve', true, Endian.LITTLE_ENDIAN);\n    this.description('Key curve id');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurveType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new CurveType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurveType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.id);\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_MAGIC = Symbol('magic');\nconst P_VERSION = Symbol('version');\nconst P_KEYS = Symbol('keys');\n\n/**\n * Represents the contents of a WalletKeys.dat file.\n */\nclass File {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} magic\n   * @param {Number} version\n   */\n  constructor(magic, version) {\n    this[P_MAGIC] = magic;\n    this[P_VERSION] = version;\n    this[P_KEYS] = [];\n  }\n\n  /**\n   * Gets the magic string.\n   *\n   * @return {String}\n   */\n  get magic() {\n    return this[P_MAGIC];\n  }\n\n  /**\n   * Gets the file version.\n   *\n   * @return {Number}\n   */\n  get version() {\n    return this[P_VERSION];\n  }\n\n  /**\n   * Gets the number of keys.\n   *\n   * @return {Number}\n   */\n  get countKeys() {\n    return this[P_KEYS].length;\n  }\n\n  /**\n   * Gets the keys in the file.\n   *\n   * @return {Key[]}\n   */\n  get keys() {\n    return this[P_KEYS];\n  }\n\n  /**\n   * Adds a key to the list of keys.\n   *\n   * @param {Key} key\n   */\n  addKey(key) {\n    this[P_KEYS].push(key);\n  }\n}\n\nmodule.exports = File;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_NAME = Symbol('name');\nconst P_PUBKEY = Symbol('public_key');\nconst P_ENC_PRIVATE_KEY = Symbol('encrypted_private_key');\n\n/**\n * Represents a key entry.\n */\nclass Key {\n  /**\n   * Constructor.\n   *\n   * @param {String} name\n   * @param {PublicKey} publicKey\n   * @param {BC} encryptedPrivateKey\n   */\n  constructor(name, publicKey, encryptedPrivateKey) {\n    this[P_NAME] = name;\n    this[P_PUBKEY] = publicKey;\n    this[P_ENC_PRIVATE_KEY] = encryptedPrivateKey;\n  }\n\n  /**\n   * Gets the name of the key.\n   *\n   * @return {String}\n   */\n  get name() {\n    return this[P_NAME];\n  }\n\n  /**\n   * Gets the associated public key.\n   *\n   * @return {PublicKey}\n   */\n  get publicKey() {\n    return this[P_PUBKEY];\n  }\n\n  /**\n   * Gets the encrypted private key.\n   *\n   * @return {BC}\n   */\n  get encryptedPrivateKey() {\n    return this[P_ENC_PRIVATE_KEY];\n  }\n}\n\nmodule.exports = Key;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Key = require('./Key');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * Coder for a key entry in the WalletKeys.dat file.\n */\nclass KeyCoder extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'walletkeys.dat_key');\n    this.description('The coder for a key entry in the walletkeys.dat file from the classic wallet.');\n    this.addSubType(\n      new Coding.Core.StringWithLength('name', 2, 'name_length', 'Length of the key name')\n        .description('The name of the key.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('publicKey')\n        .description('The public key')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('encryptedPrivateKey', 2, 'encryptedPrivateKeyLength', 'Length of crypted')\n        .description('The crypted key')\n    );\n  }\n\n  /**\n   * Decodes the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Key}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc, options, all);\n\n    return new Key(decoded.name, decoded.publicKey, decoded.encryptedPrivateKey);\n  }\n}\n\nmodule.exports = KeyCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","module.exports = require(\"buffer\");","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('./Types/Currency');\n\n/**\n * Gets information about forks and features.\n */\nclass PascalCoinInfo {\n\n  /**\n   * Gets the min fee.\n   *\n   * @param {Number|null} block\n   * @returns {Currency}\n   * @constructor\n   */\n  static MIN_FEE(block = null) {\n    return Currency.fromMolina(1);\n  }\n\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return PascalCoinInfo.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= PascalCoinInfo.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return PascalCoinInfo.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= PascalCoinInfo.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return PascalCoinInfo.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= PascalCoinInfo.DEVELOPER_REWARD;\n  }\n\n  /**\n   * Gets the max payload length in bytes.\n   *\n   * @return {number}\n   * @constructor\n   */\n  static get MAX_PAYLOAD_LENGTH() {\n    return 255;\n  }\n}\n\nmodule.exports = PascalCoinInfo;\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   * Tests are not performed.\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  /* istanbul ignore next */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (this[P_MD160].length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n\n  /**\n   * Gets a value indicating whether the given ophash equals the current ophash.\n   *\n   * @param opHash\n   * @param ignoreBlock\n   * @return {boolean}\n   */\n  equals(opHash, ignoreBlock = false) {\n    let blockResult = true;\n\n    if (!ignoreBlock) {\n      blockResult = this.block === opHash.block;\n    }\n\n    return blockResult &&\n      this.nOperation === opHash.nOperation &&\n      this.account.account === opHash.account.account &&\n      this.md160.equals(opHash.md160);\n  }\n}\n\nmodule.exports = OperationHash;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_KEY].length > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_KEY].length}`\n      );\n    }\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ecdh public key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    if (this.curve.id === Curve.CI_P521) {\n      return BC.concat(BC.fromHex('0400'), this.x, BC.fromHex('00'), this.y);\n    }\n\n    return BC.concat(BC.fromHex('04'), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\nconst Endian = require('./../../Endian');\nconst BN = require('bn.js');\n\nfunction validate64Bit(isUnsigned, value) {\n  if (isUnsigned) {\n    if (value.isNeg()) {\n      throw new Error('64bit value is negative. Only signed allowed.');\n    } else if (value.gt(new BN('18446744073709551615'))) {\n      throw new Error('Invalid unsigned 64 bit value.');\n    }\n  } else if (!isUnsigned) {\n    if (value.gt(new BN('9223372036854775807')) || value.lt(new BN('-9223372036854775808'))) {\n      throw new Error('Invalid signed 64 bit value.');\n    }\n  }\n\n  return value;\n}\n\n/**\n * Field type for 64bit int values using BN.js.\n */\nclass Int64 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned = true, endian = Endian.LITTLE_ENDIAN) {\n    super(id || 'int64', unsigned, endian);\n    this.description('8byte 64bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 8;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BN}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let value = new BN(BC.from(bc).slice(0, this.encodedSize).buffer, 10, this.endian.toLowerCase());\n\n    if (!this.unsigned) {\n      value = value.fromTwos(64);\n    }\n\n    return validate64Bit(this.unsigned, value);\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {BN} value\n   */\n  encodeToBytes(value) {\n    value = new BN(value);\n    value = validate64Bit(this.unsigned, value);\n    if (!this.unsigned) {\n      value = value.toTwos(64);\n    }\n\n    return BC.from(value.toBuffer(this.endian.toLowerCase(), this.encodedSize));\n  }\n}\n\nmodule.exports = Int64;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../../BC');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\n\nconst StringWithoutLength = require('./StringWithoutLength');\nconst Endian = require('./../../Endian');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_HAS_LEADING_ZB = Symbol('has_leading_zerobyte');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_STRING_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass StringWithLength extends AbstractType {\n\n  constructor(id, byteSize = 1, lengthId = 'length', lengthDesc = null,\n    endian = Endian.LITTLE_ENDIAN, hasLeadingZeroByte = false) {\n    super(id || `bytes_size${byteSize * 8}`);\n    this.description('String with size prepended');\n    this[P_STRING_FIELD] = new StringWithoutLength('value');\n    this[P_HAS_LEADING_ZB] = hasLeadingZeroByte;\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8(lengthId, true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16(lengthId, true, endian);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32(lengthId, true, endian);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n\n    if (lengthDesc !== null) {\n      this[P_LENGTH_FIELD].description(lengthDesc);\n    }\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].encodedSize +\n      this[P_LENGTH_FIELD].decodeFromBytes(BC.from(bc)) +\n      (+this[P_HAS_LEADING_ZB]);\n    return this[P_STRING_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize + (+this[P_HAS_LEADING_ZB]),\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    this[P_SIZE_ENCODED] = value.length;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(this[P_SIZE_ENCODED]);\n\n    if (this[P_HAS_LEADING_ZB]) {\n      bc = bc.append('00');\n    }\n\n    return bc.append(this[P_STRING_FIELD].encodeToBytes(value));\n  }\n}\n\nmodule.exports = StringWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write dynamic strings without prepending the length.\n */\nclass StringWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'string_without_length');\n    this.description('Single string value without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).toString();\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value, 'string');\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n}\n\nmodule.exports = StringWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE = Symbol('size');\n\n/**\n * A field type to encode and decode bytes with a fixed length.\n */\nclass BytesFixedLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Number} length\n   */\n  constructor(id, length) {\n    super(id || 'bytes_fixed_length_' + length);\n    this.description('Bytes with a fixed length of ' + length);\n    this[P_SIZE] = length;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE];\n  }\n\n  /**\n   * Returns the values of the given bc in the configured length.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    return value.slice(0, this[P_SIZE]);\n  }\n}\n\nmodule.exports = BytesFixedLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumberType = require('./../../Types/AccountNumber');\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass AccountNumber extends Int32 {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account', true, Endian.LITTLE_ENDIAN);\n    this.description('An account number');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNumberType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNumberType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNumberType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.account);\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass NOperation extends Int32 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'nOperation', true, Endian.LITTLE_ENDIAN);\n    this.description('Accounts n_operation value.');\n  }\n}\n\nmodule.exports = NOperation;\n","module.exports = {\n  File: require('./src/File'),\n  Key: require('./src/Key'),\n  KeyCoder: require('./src/KeyCoder'),\n  FileCoder: require('./src/FileCoder')\n};\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AbstractType: require('./AbstractType'),\n  CompositeType: require('./CompositeType'),\n  Repeating: require('./Repeating'),\n  Decissive: require('./Decissive'),\n  Core: {\n    AbstractInt: require('./Core/AbstractInt'),\n    Int8: require('./Core/Int8'),\n    Int16: require('./Core/Int16'),\n    Int32: require('./Core/Int32'),\n    Int64: require('./Core/Int64'),\n    StringWithLength: require('./Core/StringWithLength'),\n    StringWithoutLength: require('./Core/StringWithoutLength'),\n    BytesWithLength: require('./Core/BytesWithLength'),\n    BytesWithoutLength: require('./Core/BytesWithoutLength'),\n    BytesFixedLength: require('./Core/BytesFixedLength')\n  },\n  Pascal: {\n    Keys: {\n      Curve: require('./Pascal/Keys/Curve'),\n      PublicKey: require('./Pascal/Keys/PublicKey'),\n      PrivateKey: require('./Pascal/Keys/PrivateKey')\n    },\n    AccountNumber: require('./Pascal/AccountNumber'),\n    AccountName: require('./Pascal/AccountName'),\n    Currency: require('./Pascal/Currency'),\n    NOperation: require('./Pascal/NOperation'),\n    OpType: require('./Pascal/OpType'),\n    OperationHash: require('./Pascal/OperationHash')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_REPEAT_LIMIT = Symbol('repeat_limit');\nconst P_REPEAT_MARKER = Symbol('repeat_marker');\nconst P_TYPE = Symbol('type');\n\n/**\n * A Type that itself is made up of multiple other types.\n */\nclass Repeating extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id, type, repeatLimit = -1, repeatMarker = null) {\n    super(id || 'repeating');\n    super.description('A type that itself has one repeating type that will ' +\n      'be written / read until the limit is reached or data is empty.');\n    this[P_TYPE] = type;\n    this[P_REPEAT_LIMIT] = repeatLimit;\n    this[P_REPEAT_MARKER] = repeatMarker;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let result = [];\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    let limit = this[P_REPEAT_MARKER] !== null ? all[this[P_REPEAT_MARKER]] : this[P_REPEAT_LIMIT];\n    let counter = limit;\n\n    while ((limit > -1 && counter > 0) || (limit === -1 && bc.length > offset)) {\n      const decoded = this[P_TYPE].decodeFromBytes(bc.slice(offset));\n\n      result.push(decoded);\n      offset += this[P_TYPE].encodedSize;\n      counter--;\n    }\n\n    this[P_SIZE_ENCODED] = offset;\n\n    return result;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(arr) {\n    let bc = BC.empty();\n\n    arr.forEach((item, idx) => {\n      if (idx >= this[P_REPEAT_LIMIT] && this[P_REPEAT_LIMIT] > -1) {\n        return;\n      }\n      bc = bc.append(this[P_TYPE].encodeToBytes(item));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  get repeatingType() {\n    return this[P_TYPE];\n  }\n}\n\nmodule.exports = Repeating;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CompositeType = require('./CompositeType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_SUBTYPE_RESOLVER = Symbol('subtype_resolver');\nconst P_MARKER_FIELD = Symbol('marker_field');\nconst P_FLATTEN = Symbol('flatten');\n\n/**\n * A Type that itself is made up of multiple other types. The types are selected dynamically\n * depending on the given resolver.\n */\nclass Decissive extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor(id, markerField, subTypeResolver, flatten = false) {\n    super(id || 'decissive');\n    super.description('A type that itself has many sub types but only some are triggere based on a marker.');\n    this[P_SUBTYPE_RESOLVER] = subTypeResolver;\n    this[P_MARKER_FIELD] = markerField;\n    this[P_FLATTEN] = flatten;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n\n    this[P_SIZE_ENCODED] = subType.encodedSize;\n    return subType.decodeFromBytes(bc, options, all);\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray, all) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n    let bc = subType.encodeToBytes(objOrArray);\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * Gets a value indicating whether the value should be flattened.\n   *\n   * @return {bool}\n   */\n  get flatten() {\n    return this[P_FLATTEN];\n  }\n}\n\nmodule.exports = Decissive;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst BytesWithoutLength = require('../../Core/BytesWithoutLength');\nconst CompositeType = require('../../CompositeType');\nconst BC = require('../../../BC');\nconst Sha = require('../../../Sha');\nconst Base58 = require('../../../Base58');\nconst PublicKeyType = require('./../../../../src/Types/Keys/PublicKey');\n\n/**\n * A Public Key value.\n */\nclass PublicKey extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} omitXYLenghts\n   */\n  constructor(id = null, omitXYLenghts = false) {\n    super(id || 'public_key');\n    this.addSubType(new Curve('curve'));\n\n    // oh come on..\n    if (omitXYLenghts) {\n      this.addSubType(\n        new BytesWithoutLength('x')\n          .description('The X value of the public key.')\n      );\n      this.addSubType(new BytesWithoutLength('y'));\n    } else {\n      this.addSubType(\n        new BytesWithLength('x', 2, 'x_length', 'Length of X value')\n          .description('The X value of the public key.')\n      );\n      this.addSubType(\n        new BytesWithLength('y', 2, 'y_length', 'Length of Y value')\n          .description('The X value of the public key.')\n      );\n    }\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PublicKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PublicKeyType(decoded.x, decoded.y, decoded.curve);\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  encodeToBase58(publicKey) {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encodeToBytes(publicKey);\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  decodeFromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return this.decodeFromBytes(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst CompositeType = require('../../CompositeType');\nconst PrivateKeyType = require('./../../../../src/Types/Keys/PrivateKey');\n\n/**\n * A coder for a private key.\n */\nclass PrivateKey extends CompositeType {\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'private_key');\n    this.addSubType(\n      new Curve('curve')\n    );\n    this.addSubType(\n      new BytesWithLength('key', 2)\n        .description('The private key value.')\n    );\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PrivateKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PrivateKeyType(decoded.key, decoded.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {PrivateKeyType} value\n   * @returns {PrivateKeyType}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNameType = require('./../../Types/AccountName');\nconst StringWithLength = require('../Core/StringWithLength');\n\n/**\n * A pascal related type that can de/encode an account name.\n */\nclass AccountName extends StringWithLength {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null, byteSize = 2) {\n    super(id || 'account_name', byteSize);\n    this.description('An account name');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNameType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNameType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNameType} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.toString());\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Int64 = require('./../Core/Int64');\nconst CurrencyType = require('./../../Types/Currency');\nconst Endian = require('./../../Endian');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Currency extends Int64 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null, unsigned = true, endian = Endian.LITTLE_ENDIAN) {\n    super(id || 'currency', unsigned, endian);\n    this.description('A type for currency values.');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurrencyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return CurrencyType.fromMolina(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurrencyType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.bn);\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./../Core/Int8');\nconst Int16 = require('./../Core/Int16');\nconst Int32 = require('./../Core/Int32');\n\nconst P_INT_TYPE = Symbol('int_type');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass OpType extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize) {\n    super(id || `optype_int${byteSize * 8}`);\n    switch (byteSize) {\n      case 1:\n        this[P_INT_TYPE] = new Int8('OpType[Int8]', true);\n        break;\n      case 2:\n        this[P_INT_TYPE] = new Int16('OpType[Int16]', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_INT_TYPE] = new Int32('OpType[Int32]', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw Error('Invalid byte size.');\n    }\n    this.description(`Operation type in ${byteSize * 8} bits`);\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_INT_TYPE].encodedSize;\n  }\n\n  /**\n   * Decodes and returns the optype.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Number}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return this[P_INT_TYPE].decodeFromBytes(bc);\n  }\n\n  /**\n   * Encodes the given optype to bytes.\n   *\n   * @param {Number} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    return this[P_INT_TYPE].encodeToBytes(value);\n  }\n\n  get intType() {\n    return this[P_INT_TYPE];\n  }\n}\n\nmodule.exports = OpType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst CompositeType = require('./../CompositeType');\nconst Int32 = require('./../Core/Int32');\nconst AccountNumber = require('./AccountNumber');\nconst BytesWithFixedLength = require('./../Core/BytesFixedLength');\nconst NOperation = require('./NOperation');\nconst OperationHashType = require('./../../Types/OperationHash');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass OperationHash extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'ophash');\n    this.description('A pascalCoin operation hash');\n\n    this.addSubType(\n      new Int32('block', true, Endian.LITTLE_ENDIAN)\n        .description('The block the operation is in.')\n    );\n    this.addSubType(\n      new AccountNumber('account')\n        .description('The account number that signed the operation.')\n    );\n    this.addSubType(\n      new NOperation('nOperation', 4)\n        .description('The n_operation value of the account with the current operation.')\n    );\n    this.addSubType(\n      new BytesWithFixedLength('md160', 20)\n        .description('The RIPEMD160 hash of the operation data.')\n    );\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {OperationHash}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new OperationHashType(decoded.block, decoded.account, decoded.nOperation, decoded.md160);\n  }\n\n  /**\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {OperationHash} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = OperationHash;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst File = require('./File');\nconst KeyCoder = require('./KeyCoder');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * Coder for a WalletKeys.dat file from the classic wallet.\n */\nclass FileCoder extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'walletkeys.dat');\n    this.description('The coder for the walletkeys.dat file from the classic wallet.');\n    this.addSubType(\n      new Coding.Core.StringWithLength('magic', 1, 'magic_length', 'Length of the magic', Endian.LITTLE_ENDIAN, true)\n        .description('The name of the magic.')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('version', true, Endian.LITTLE_ENDIAN)\n        .description('Version of file')\n    );\n    const decissiveCoder = new Coding.Decissive('versioned', 'version', (versionValue) => {\n      // Decide here when the version is updated, currently only 100 is supported\n      if (versionValue === 100 || true) {\n        const V100Coder = new Coding.CompositeType('v100');\n\n        V100Coder.addSubType(\n          new Coding.Core.Int32('countKeys', true, Endian.LITTLE_ENDIAN)\n            .description('The number of keys in the file')\n        );\n\n        V100Coder.addSubType(\n          new Coding.Repeating('keys', new KeyCoder('keys'), -1, 'countKeys')\n            .description('List of keys')\n        );\n\n        return V100Coder;\n      }\n\n      throw new Error('Invalid walletkeys version');\n    });\n\n    this.addSubType(decissiveCoder);\n  }\n\n  /**\n   * Decodes the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {File}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc, options, all);\n    const keyFile = new File(decoded.magic, decoded.version);\n\n    decoded.versioned.keys.forEach((key => {\n      keyFile.addKey(key);\n    }));\n\n    return keyFile;\n  }\n\n  /**\n   * Encodes the given File object to a list of bytes.\n   *\n   * @param {File} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray) {\n    let obj = {\n      magic: objOrArray.magic,\n      version: objOrArray.version,\n      versioned: {\n        countKeys: objOrArray.countKeys,\n        keys: objOrArray.keys\n      }\n    };\n\n    return super.encodeToBytes(obj);\n  }\n}\n\nmodule.exports = FileCoder;\n"],"sourceRoot":""}